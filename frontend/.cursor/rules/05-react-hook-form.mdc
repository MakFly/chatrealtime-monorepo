---
description: React Hook Form - Performant form management with Zod validation
globs:
  - "components/**/*form*.{ts,tsx}"
  - "features/**/components/**/*form*.{ts,tsx}"
  - "app/**/*form*.{ts,tsx}"
alwaysApply: false
---

# React Hook Form - Form Management Best Practices

## Overview

**React Hook Form** provides performant, flexible forms with easy validation.

**Why use it?**
- ✅ Minimal re-renders (better performance)
- ✅ Built-in validation with Zod integration
- ✅ Small bundle size
- ✅ TypeScript support
- ✅ Easy integration with shadcn/ui Form components

## Basic Setup

### Simple Form

```typescript
'use client'

import { useForm } from 'react-hook-form'

type FormData = {
  email: string
  password: string
}

export function LoginForm() {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>()

  const onSubmit = (data: FormData) => {
    console.log(data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('email')} />
      {errors.email && <span>{errors.email.message}</span>}

      <input type="password" {...register('password')} />
      {errors.password && <span>{errors.password.message}</span>}

      <button type="submit">Login</button>
    </form>
  )
}
```

## Zod Integration

### Setup with Zod Resolver

```typescript
'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const formSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  confirmPassword: z.string()
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ['confirmPassword']
})

type FormData = z.infer<typeof formSchema>

export function SignupForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    mode: 'onChange', // Validate on change
    defaultValues: {
      email: '',
      password: '',
      confirmPassword: ''
    }
  })

  const onSubmit = (data: FormData) => {
    console.log(data)
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      <input {...form.register('email')} />
      {form.formState.errors.email && (
        <span>{form.formState.errors.email.message}</span>
      )}

      <input type="password" {...form.register('password')} />
      {form.formState.errors.password && (
        <span>{form.formState.errors.password.message}</span>
      )}

      <input type="password" {...form.register('confirmPassword')} />
      {form.formState.errors.confirmPassword && (
        <span>{form.formState.errors.confirmPassword.message}</span>
      )}

      <button type="submit" disabled={form.formState.isSubmitting}>
        {form.formState.isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  )
}
```

## Shadcn/UI Form Integration

### Complete Form Example

```typescript
'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { toast } from 'sonner'

const profileSchema = z.object({
  username: z.string()
    .min(2, 'Username must be at least 2 characters')
    .max(50, 'Username must be less than 50 characters'),
  email: z.string().email('Invalid email address'),
  bio: z.string().max(160, 'Bio must be less than 160 characters').optional()
})

type ProfileFormData = z.infer<typeof profileSchema>

export function ProfileForm() {
  const form = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      username: '',
      email: '',
      bio: ''
    }
  })

  const onSubmit = async (data: ProfileFormData) => {
    try {
      // API call or server action
      await updateProfile(data)
      toast.success('Profile updated successfully')
    } catch (error) {
      toast.error('Failed to update profile')
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="johndoe" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input type="email" placeholder="email@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="bio"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Bio</FormLabel>
              <FormControl>
                <textarea
                  className="w-full rounded-md border p-2"
                  placeholder="Tell us about yourself"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit" disabled={form.formState.isSubmitting}>
          {form.formState.isSubmitting ? 'Saving...' : 'Save Changes'}
        </Button>
      </form>
    </Form>
  )
}
```

## Advanced Form Controls

### Select

```typescript
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

<FormField
  control={form.control}
  name="country"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Country</FormLabel>
      <Select onValueChange={field.onChange} defaultValue={field.value}>
        <FormControl>
          <SelectTrigger>
            <SelectValue placeholder="Select a country" />
          </SelectTrigger>
        </FormControl>
        <SelectContent>
          <SelectItem value="us">United States</SelectItem>
          <SelectItem value="uk">United Kingdom</SelectItem>
          <SelectItem value="ca">Canada</SelectItem>
        </SelectContent>
      </Select>
      <FormMessage />
    </FormItem>
  )}
/>
```

### Checkbox

```typescript
import { Checkbox } from '@/components/ui/checkbox'

<FormField
  control={form.control}
  name="terms"
  render={({ field }) => (
    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
      <FormControl>
        <Checkbox
          checked={field.value}
          onCheckedChange={field.onChange}
        />
      </FormControl>
      <div className="space-y-1 leading-none">
        <FormLabel>
          Accept terms and conditions
        </FormLabel>
        <FormDescription>
          You agree to our Terms of Service and Privacy Policy.
        </FormDescription>
      </div>
      <FormMessage />
    </FormItem>
  )}
/>
```

### Radio Group

```typescript
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'

<FormField
  control={form.control}
  name="type"
  render={({ field }) => (
    <FormItem className="space-y-3">
      <FormLabel>Notify me about...</FormLabel>
      <FormControl>
        <RadioGroup
          onValueChange={field.onChange}
          defaultValue={field.value}
          className="flex flex-col space-y-1"
        >
          <FormItem className="flex items-center space-x-3 space-y-0">
            <FormControl>
              <RadioGroupItem value="all" />
            </FormControl>
            <FormLabel className="font-normal">
              All new messages
            </FormLabel>
          </FormItem>
          <FormItem className="flex items-center space-x-3 space-y-0">
            <FormControl>
              <RadioGroupItem value="mentions" />
            </FormControl>
            <FormLabel className="font-normal">
              Direct messages and mentions
            </FormLabel>
          </FormItem>
          <FormItem className="flex items-center space-x-3 space-y-0">
            <FormControl>
              <RadioGroupItem value="none" />
            </FormControl>
            <FormLabel className="font-normal">Nothing</FormLabel>
          </FormItem>
        </RadioGroup>
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
```

### Date Picker

```typescript
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { CalendarIcon } from 'lucide-react'
import { format } from 'date-fns'

<FormField
  control={form.control}
  name="dob"
  render={({ field }) => (
    <FormItem className="flex flex-col">
      <FormLabel>Date of birth</FormLabel>
      <Popover>
        <PopoverTrigger asChild>
          <FormControl>
            <Button
              variant="outline"
              className={cn(
                'w-[240px] pl-3 text-left font-normal',
                !field.value && 'text-muted-foreground'
              )}
            >
              {field.value ? (
                format(field.value, 'PPP')
              ) : (
                <span>Pick a date</span>
              )}
              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
            </Button>
          </FormControl>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            mode="single"
            selected={field.value}
            onSelect={field.onChange}
            disabled={(date) =>
              date > new Date() || date < new Date('1900-01-01')
            }
            initialFocus
          />
        </PopoverContent>
      </Popover>
      <FormMessage />
    </FormItem>
  )}
/>
```

## Integration with Server Actions

### With next-safe-action

```typescript
'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { useAction } from 'next-safe-action/hooks'
import { updateProfileAction } from '@/lib/actions/profile'
import { z } from 'zod'
import { toast } from 'sonner'

const formSchema = z.object({
  name: z.string().min(1),
  email: z.string().email()
})

type FormData = z.infer<typeof formSchema>

export function ProfileForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema)
  })

  const { execute, isExecuting } = useAction(updateProfileAction, {
    onSuccess: ({ data }) => {
      if (data?.success) {
        toast.success('Profile updated successfully')
        form.reset()
      }
    },
    onError: ({ error }) => {
      // Handle validation errors from server
      if (error.validationErrors) {
        Object.entries(error.validationErrors).forEach(([key, value]) => {
          form.setError(key as any, {
            type: 'server',
            message: value?.[0]
          })
        })
      } else {
        toast.error(error.serverError || 'Something went wrong')
      }
    }
  })

  const onSubmit = (data: FormData) => {
    execute(data)
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      {/* form fields */}
      <button disabled={isExecuting}>
        {isExecuting ? 'Saving...' : 'Save'}
      </button>
    </form>
  )
}
```

## Form Validation Modes

```typescript
const form = useForm({
  mode: 'onChange', // Validate on every change
  mode: 'onBlur', // Validate on blur
  mode: 'onSubmit', // Validate on submit (default)
  mode: 'onTouched', // Validate after first blur, then on change
  mode: 'all' // Validate on blur and change
})
```

## Dynamic Fields

### Field Arrays

```typescript
'use client'

import { useForm, useFieldArray } from 'react-hook-form'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'

type FormData = {
  items: { name: string; quantity: number }[]
}

export function DynamicForm() {
  const form = useForm<FormData>({
    defaultValues: {
      items: [{ name: '', quantity: 1 }]
    }
  })

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'items'
  })

  return (
    <form onSubmit={form.handleSubmit(data => console.log(data))}>
      {fields.map((field, index) => (
        <div key={field.id} className="flex gap-2">
          <Input
            {...form.register(`items.${index}.name`)}
            placeholder="Item name"
          />
          <Input
            type="number"
            {...form.register(`items.${index}.quantity`, { valueAsNumber: true })}
            placeholder="Quantity"
          />
          <Button type="button" onClick={() => remove(index)}>
            Remove
          </Button>
        </div>
      ))}

      <Button
        type="button"
        onClick={() => append({ name: '', quantity: 1 })}
      >
        Add Item
      </Button>

      <Button type="submit">Submit</Button>
    </form>
  )
}
```

## Conditional Fields

```typescript
const form = useForm<FormData>()
const watchShowEmail = form.watch('showEmail', false)

return (
  <form>
    <FormField
      control={form.control}
      name="showEmail"
      render={({ field }) => (
        <FormItem>
          <FormControl>
            <Checkbox
              checked={field.value}
              onCheckedChange={field.onChange}
            />
          </FormControl>
          <FormLabel>Show email field</FormLabel>
        </FormItem>
      )}
    />

    {watchShowEmail && (
      <FormField
        control={form.control}
        name="email"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Email</FormLabel>
            <FormControl>
              <Input type="email" {...field} />
            </FormControl>
          </FormItem>
        )}
      />
    )}
  </form>
)
```

## File Upload

```typescript
const formSchema = z.object({
  avatar: z.instanceof(File)
    .refine((file) => file.size <= 5_000_000, 'Max file size is 5MB')
    .refine(
      (file) => ['image/jpeg', 'image/png'].includes(file.type),
      'Only JPEG and PNG files are allowed'
    )
})

<FormField
  control={form.control}
  name="avatar"
  render={({ field: { value, onChange, ...field } }) => (
    <FormItem>
      <FormLabel>Avatar</FormLabel>
      <FormControl>
        <Input
          type="file"
          accept="image/*"
          onChange={(e) => {
            const file = e.target.files?.[0]
            if (file) onChange(file)
          }}
          {...field}
        />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
```

## Custom Validation

```typescript
const formSchema = z.object({
  username: z.string()
    .min(3)
    .refine(async (username) => {
      // Custom async validation
      const exists = await checkUsernameExists(username)
      return !exists
    }, 'Username is already taken')
})
```

## Reset Form

```typescript
// Reset to default values
form.reset()

// Reset with new values
form.reset({
  username: 'newuser',
  email: 'new@example.com'
})

// Reset specific field
form.resetField('username')
```

## Best Practices

### ✅ Do's
- Use Zod for validation schemas
- Use `mode: 'onChange'` for real-time validation
- Set default values to avoid uncontrolled inputs
- Use TypeScript for type safety
- Handle server-side validation errors with `setError()`
- Show loading states during submission
- Reset form after successful submission
- Use shadcn/ui Form components for consistency

### ❌ Don'ts
- Don't forget to handle submission errors
- Don't mutate form state directly
- Don't ignore accessibility (labels, error messages)
- Don't validate on every keystroke for expensive operations
- Don't forget to disable submit button during submission
- Don't use uncontrolled inputs with React Hook Form
- Don't mix controlled and uncontrolled inputs

## Summary

React Hook Form provides:
- ✅ Performant form state management
- ✅ Built-in Zod validation support
- ✅ TypeScript type safety
- ✅ Minimal re-renders
- ✅ Easy integration with shadcn/ui
- ✅ Dynamic field arrays
- ✅ Conditional fields
- ✅ File upload support
