---
description: shadcn/ui - Accessible UI components with Radix UI and Tailwind CSS
globs:
  - "components/ui/**/*.{ts,tsx}"
  - "components/**/*.{ts,tsx}"
  - "features/**/components/**/*.{ts,tsx}"
  - "app/**/*.{ts,tsx}"
alwaysApply: true
---

# Shadcn/UI - Component Library Best Practices

## Overview

**shadcn/ui** is a collection of re-usable, accessible components built with Radix UI and Tailwind CSS.

**Key Features:**
- ✅ Accessible (WCAG compliant)
- ✅ Customizable (copy components, own the code)
- ✅ Beautifully designed (New York style)
- ✅ TypeScript support
- ✅ Dark mode support
- ✅ CSS variables for theming

## Installation & Setup

### Add Components

```bash
# Using Bun - Add individual components
bunx --bun shadcn@latest add button
bunx --bun shadcn@latest add card
bunx --bun shadcn@latest add dialog

# Add multiple at once
bunx --bun shadcn@latest add button card dialog form input
```

### Update Components

```bash
# Update all components
bunx --bun shadcn@latest update

# Update specific component
bunx --bun shadcn@latest update button
```

## Component Organization

### Recommended Structure

```
components/
├── ui/                  # shadcn/ui components (installed via CLI)
│   ├── button.tsx
│   ├── card.tsx
│   ├── dialog.tsx
│   ├── form.tsx
│   └── ...
├── layout/              # Layout components
│   ├── header.tsx
│   ├── footer.tsx
│   └── sidebar.tsx
├── forms/               # Reusable forms
│   ├── login-form.tsx
│   └── signup-form.tsx
├── modals/              # Modal components
│   ├── confirm-modal.tsx
│   └── user-modal.tsx
└── shared/              # Shared components
    ├── logo.tsx
    └── user-avatar.tsx
```

## Basic Usage

### Button

```typescript
import { Button } from '@/components/ui/button'

export function Example() {
  return (
    <div className="space-x-2">
      <Button>Default</Button>
      <Button variant="destructive">Delete</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="link">Link</Button>
      <Button size="sm">Small</Button>
      <Button size="lg">Large</Button>
      <Button disabled>Disabled</Button>
    </div>
  )
}
```

### Card

```typescript
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from '@/components/ui/card'
import { Button } from '@/components/ui/button'

export function ProductCard() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Product Name</CardTitle>
        <CardDescription>Product description</CardDescription>
      </CardHeader>
      <CardContent>
        <p>Card content goes here</p>
      </CardContent>
      <CardFooter>
        <Button>Buy Now</Button>
      </CardFooter>
    </Card>
  )
}
```

### Dialog (Modal)

```typescript
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'

export function ConfirmDialog() {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="destructive">Delete</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Are you sure?</DialogTitle>
          <DialogDescription>
            This action cannot be undone.
          </DialogDescription>
        </DialogHeader>
        <div className="flex justify-end space-x-2">
          <Button variant="outline">Cancel</Button>
          <Button variant="destructive">Delete</Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}
```

## Form Components

### Basic Form

```typescript
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'

const formSchema = z.object({
  username: z.string().min(2, 'Username must be at least 2 characters'),
  email: z.string().email('Invalid email address')
})

export function ProfileForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: ''
    }
  })

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    console.log(values)
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="johndoe" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input type="email" placeholder="email@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

### Select

```typescript
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'

<FormField
  control={form.control}
  name="role"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Role</FormLabel>
      <Select onValueChange={field.onChange} defaultValue={field.value}>
        <FormControl>
          <SelectTrigger>
            <SelectValue placeholder="Select a role" />
          </SelectTrigger>
        </FormControl>
        <SelectContent>
          <SelectItem value="admin">Admin</SelectItem>
          <SelectItem value="user">User</SelectItem>
          <SelectItem value="guest">Guest</SelectItem>
        </SelectContent>
      </Select>
      <FormMessage />
    </FormItem>
  )}
/>
```

### Checkbox

```typescript
import { Checkbox } from '@/components/ui/checkbox'

<FormField
  control={form.control}
  name="terms"
  render={({ field }) => (
    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
      <FormControl>
        <Checkbox
          checked={field.value}
          onCheckedChange={field.onChange}
        />
      </FormControl>
      <div className="space-y-1 leading-none">
        <FormLabel>
          Accept terms and conditions
        </FormLabel>
        <FormDescription>
          You agree to our Terms of Service and Privacy Policy.
        </FormDescription>
      </div>
      <FormMessage />
    </FormItem>
  )}
/>
```

## Advanced Components

### Data Table

```typescript
'use client'

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable
} from '@tanstack/react-table'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table'

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel()
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map(headerGroup => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map(header => (
                <TableHead key={header.id}>
                  {flexRender(
                    header.column.columnDef.header,
                    header.getContext()
                  )}
                </TableHead>
              ))}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map(row => (
              <TableRow key={row.id}>
                {row.getVisibleCells().map(cell => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

### Toast Notifications (Sonner)

```typescript
// app/layout.tsx
import { Toaster } from '@/components/ui/sonner'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        {children}
        <Toaster />
      </body>
    </html>
  )
}

// Usage in components
import { toast } from 'sonner'

export function Example() {
  return (
    <Button
      onClick={() => {
        toast.success('Event has been created')
        toast.error('Event has not been created')
        toast.info('Be at the area 10 minutes before')
        toast.warning('Event start time cannot be earlier')
      }}
    >
      Show Toast
    </Button>
  )
}
```

## Customization

### Creating Wrapper Components

```typescript
// components/shared/primary-button.tsx
import { Button, ButtonProps } from '@/components/ui/button'
import { cn } from '@/lib/utils'

export function PrimaryButton({ className, ...props }: ButtonProps) {
  return (
    <Button
      className={cn(
        'bg-primary hover:bg-primary/90',
        'text-primary-foreground',
        'shadow-lg',
        className
      )}
      {...props}
    />
  )
}
```

### Using Variants with CVA

```typescript
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const badgeVariants = cva(
  'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground',
        secondary: 'bg-secondary text-secondary-foreground',
        destructive: 'bg-destructive text-destructive-foreground',
        outline: 'border border-input'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

export function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}
```

## Server Components with shadcn/ui

```typescript
// app/products/page.tsx - Server Component
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

async function getProducts() {
  const res = await fetch('/api/products')
  return res.json()
}

export default async function ProductsPage() {
  const products = await getProducts()

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {products.map(product => (
        <Card key={product.id}>
          <CardHeader>
            <CardTitle>{product.name}</CardTitle>
          </CardHeader>
          <CardContent>
            <p>{product.description}</p>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}
```

## Accessibility

### ARIA Labels

```typescript
import { Button } from '@/components/ui/button'
import { X } from 'lucide-react'

export function IconButton() {
  return (
    <Button
      variant="ghost"
      size="icon"
      aria-label="Close dialog"
    >
      <X className="h-4 w-4" />
    </Button>
  )
}
```

### Focus Management

```typescript
import { Dialog, DialogContent } from '@/components/ui/dialog'

export function AccessibleDialog() {
  return (
    <Dialog>
      <DialogContent>
        {/* Focus automatically managed by Radix UI */}
        <input autoFocus />
      </DialogContent>
    </Dialog>
  )
}
```

## Best Practices

### ✅ Do's
- Keep UI components pure (no business logic)
- Use Server Components when possible
- Create wrappers for commonly used variants
- Use `cn()` utility for conditional className merging
- Provide ARIA labels for icon-only buttons
- Follow Radix UI composition patterns (e.g., `asChild`)
- Update components regularly (`npx shadcn@latest update`)

### ❌ Don'ts
- Don't add business logic to UI components
- Don't modify shadcn components directly (create wrappers)
- Don't forget accessibility (ARIA labels, focus management)
- Don't use `"use client"` unless needed for interactivity
- Don't ignore component variants (use them for consistency)
- Don't mix different styling approaches (stick with Tailwind)

## Theming

### CSS Variables

Edit `app/globals.css`:

```css
@theme inline {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 0 0% 3.9%;
  --radius: 0.5rem;
}
```

### Dark Mode

Use `next-themes`:

```typescript
// app/providers.tsx
import { ThemeProvider } from 'next-themes'

export function Providers({ children }) {
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
      {children}
    </ThemeProvider>
  )
}
```

## Summary

shadcn/ui provides:
- ✅ Accessible, customizable components
- ✅ Built with Radix UI primitives
- ✅ Styled with Tailwind CSS
- ✅ TypeScript support
- ✅ Dark mode ready
- ✅ You own the code (no npm package)
